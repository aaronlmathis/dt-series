name: 'PR Validation'

on:
  pull_request:
    branches: [ develop ]
    paths:
      - 'provisioning/**'
      - 'configuration-management/**'
      - 'environments/**'

env:
  ARM_USE_OIDC: true
  ARM_USE_CLI: false

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  lint-validate:
    name: 'Lint and Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible ansible-lint yamllint

    # Terraform Validation
    - name: Terraform fmt check
      run: |
        cd provisioning
        terraform fmt -check
      continue-on-error: true

    - name: Terraform Init (validation only)
      run: |
        cd provisioning
        cp ../environments/dev/terraform.tfvars .
        cp ../environments/dev/backend.tf .
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd provisioning
        terraform validate

    # Ansible Validation
    - name: Ansible Lint
      run: |
        cd configuration-management
        ansible-lint site.yml
      continue-on-error: true

    - name: YAML Lint
      run: |
        yamllint -d relaxed configuration-management/
      continue-on-error: true

    - name: Ansible Syntax Check
      run: |
        cd configuration-management
        # Create temporary inventory for syntax check
        mkdir -p temp_inventory
        cat > temp_inventory/hosts.yml << EOF
        all:
          children:
            azure_vms:
              hosts:
                test-vm:
                  ansible_host: 127.0.0.1
                  ansible_user: testuser
                  ansible_python_interpreter: /usr/bin/python3
        EOF
        
        ansible-playbook --syntax-check site.yml -i temp_inventory/hosts.yml

  terraform-plan:
    name: 'Terraform Plan (Dev)'
    runs-on: ubuntu-latest
    needs: lint-validate
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login via OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Copy dev configuration
      run: |
        cp environments/dev/terraform.tfvars provisioning/
        cp environments/dev/backend.tf provisioning/

    - name: Terraform Init
      run: |
        cd provisioning
        terraform init

    - name: Terraform Plan
      run: |
        cd provisioning
        terraform plan -var-file=terraform.tfvars
      env:
        ARM_USE_OIDC: true
        ARM_USE_CLI: false
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  ansible-check:
    name: 'Ansible Check Mode'
    runs-on: ubuntu-latest
    needs: lint-validate
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible

    - name: Install Ansible collections
      run: |
        cd configuration-management
        ansible-galaxy collection install -r requirements.yml

    - name: Create mock inventory
      run: |
        mkdir -p configuration-management/inventory
        cat > configuration-management/inventory/hosts.yml << EOF
        all:
          children:
            azure_vms:
              hosts:
                mock-vm:
                  ansible_host: 127.0.0.1
                  ansible_user: azureuser
                  ansible_python_interpreter: /usr/bin/python3
        EOF

    - name: Ansible Check Mode (Dry Run)
      run: |
        cd configuration-management
        cp ../environments/dev/ansible_vars.yml group_vars/azure_vms.yml
        ansible-playbook -i inventory/hosts.yml site.yml --check --diff
      continue-on-error: true

  integration-tests:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    needs: [terraform-plan, ansible-check]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        pip install pytest pyyaml

    - name: Run infrastructure tests
      run: |
        cd tests
        python -m pytest test_infrastructure.py -v
