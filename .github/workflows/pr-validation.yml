name: 'Infrastructure Validation'

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'provisioning/**'
      - 'configuration-management/**'
      - 'environments/**'
      - '.github/workflows/**'
  workflow_dispatch:

env:
  ARM_USE_OIDC: true
  ARM_USE_CLI: false
  ARM_SKIP_PROVIDER_REGISTRATION: false

jobs:
  security-scan:
    name: 'Security Scanning'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Checkov static analysis
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform,ansible
        soft_fail: true
        output_format: sarif
        output_file_path: reports/results.sarif

  terraform-validate:
    name: 'Terraform Validation'
    runs-on: ubuntu-latest
    needs: security-scan
    
    strategy:
      matrix:
        environment: [dev, staging, production]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Copy environment configuration
      run: |
        cp environments/${{ matrix.environment }}/terraform.tfvars provisioning/
        cp environments/${{ matrix.environment }}/backend.tf provisioning/

    - name: Terraform fmt
      run: |
        cd provisioning
        terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      run: |
        cd provisioning
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd provisioning
        terraform validate

    - name: Upload validation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: terraform-validation-${{ matrix.environment }}
        path: provisioning/.terraform/

  ansible-validate:
    name: 'Ansible Validation'
    runs-on: ubuntu-latest
    needs: security-scan
    
    strategy:
      matrix:
        environment: [dev, staging, production]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible ansible-lint yamllint

    - name: Install Ansible collections
      run: |
        cd configuration-management
        ansible-galaxy collection install -r requirements.yml

    - name: Ansible Lint
      run: |
        cd configuration-management
        ansible-lint site.yml
      continue-on-error: true

    - name: YAML Lint
      run: |
        yamllint -d relaxed configuration-management/
      continue-on-error: true

    - name: Ansible Syntax Check
      run: |
        cd configuration-management
        # Create temporary inventory for syntax check
        mkdir -p temp_inventory
        cat > temp_inventory/hosts.yml << EOF
        all:
          children:
            azure_vms:
              hosts:
                test-vm:
                  ansible_host: 127.0.0.1
                  ansible_user: testuser
                  ansible_python_interpreter: /usr/bin/python3
        EOF
        
        # Copy environment-specific vars
        cp ../environments/${{ matrix.environment }}/ansible_vars.yml group_vars/temp_env.yml
        
        ansible-playbook --syntax-check site.yml -i temp_inventory/hosts.yml
        
        # Cleanup
        rm -rf temp_inventory group_vars/temp_env.yml

  integration-tests:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    needs: [terraform-validate, ansible-validate]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        pip install pytest testinfra

    - name: Run integration tests
      run: |
        cd tests
        python -m pytest test_infrastructure.py -v

  comment-pr:
    name: 'Comment on PR'
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-validate, ansible-validate, integration-tests]
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          
          const jobs = [
            { name: 'Security Scanning', result: '${{ needs.security-scan.result }}' },
            { name: 'Terraform Validation', result: '${{ needs.terraform-validate.result }}' },
            { name: 'Ansible Validation', result: '${{ needs.ansible-validate.result }}' },
            { name: 'Integration Tests', result: '${{ needs.integration-tests.result }}' }
          ];
          
          let message = `## 🔍 Infrastructure Validation Results\n\n`;
          
          for (const job of jobs) {
            const emoji = job.result === 'success' ? '✅' : job.result === 'failure' ? '❌' : '⚠️';
            message += `${emoji} **${job.name}**: ${job.result}\n`;
          }
          
          message += `\n📝 **Commit**: ${context.sha.substring(0, 7)}`;
          message += `\n🔗 **Workflow**: [View Details](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: message
          });
