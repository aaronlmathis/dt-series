name: 'Deploy to Staging'

on:
  workflow_run:
    workflows: ["Deploy to Development"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      ref:
        description: 'The branch or commit SHA to deploy to staging'
        required: true
        default: 'develop'

# ── global defaults ───────────────────────────────────────────────────────────
env:
  ARM_USE_OIDC: true
  ARM_USE_CLI:  false
  ENVIRONMENT:  staging

permissions:
  id-token: write
  contents: read

# ──────────────────────────────────────────────────────────────────────────────
jobs:
# 0 ───────────── Confirm Dev succeeded (skipped for manual dispatch) ──────────
  check-dev-success:
    name: 'Check Dev Deployment Success'
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Dev deployment successful
      run: echo "Development deployment completed successfully, proceeding to staging"

# 1 ────────────────── Deploy infra & config to staging ────────────────────────
  deploy:
    name: 'Deploy Infrastructure & Configuration'
    runs-on: ubuntu-latest
    needs: check-dev-success
    environment: staging

    env:                             
      ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    outputs:
      vm_ip: ${{ steps.terraform-outputs.outputs.vm_ip }}
      vm_name: ${{ steps.terraform-outputs.outputs.vm_name }}
    
    steps:
    - name: Checkout code from the Dev run
      uses: actions/checkout@v4
      with:
        # pulls the exact commit SHA that kicked off Deploy to Development
        ref: ${{ github.event.inputs.ref || github.event.workflow_run.head_sha }}

    - name: Azure Login via OIDC
      uses: azure/login@v1
      with:
        client-id:       ${{ env.ARM_CLIENT_ID }}
        tenant-id:       ${{ env.ARM_TENANT_ID }}
        subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.2

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible

    - name: Setup SSH Keys
      run: |
        mkdir -p ~/.ssh provisioning/keys
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        # Generate public key from private key
        ssh-keygen -y -f ~/.ssh/id_rsa > provisioning/keys/id_rsa.pub

    # ── Terraform ──────────────────────────────────────────────────────────
    - name: Copy environment configuration
      run: |
        cp environments/${{ env.ENVIRONMENT }}/terraform.tfvars provisioning/
        cp environments/${{ env.ENVIRONMENT }}/backend.tf provisioning/

    - name: Terraform Init
      run: |
        cd provisioning
        terraform init
        terraform plan -var-file=terraform.tfvars
        terraform apply -auto-approve -var-file=terraform.tfvars

    - name: Get Terraform Outputs
      id: terraform-outputs
      run: |
        cd provisioning
        echo "vm_ip=$(terraform output -raw public_ip_address)" >> $GITHUB_OUTPUT
        echo "vm_name=$(terraform output -raw vm_name)" >> $GITHUB_OUTPUT

    # ── Ansible ────────────────────────────────────────────────────────────
    - name: Create Ansible inventory
      run: |
        mkdir -p configuration-management/inventory
        cat > configuration-management/inventory/hosts.yml << EOF
        all:
          children:
            azure_vms:
              hosts:
                ${{ steps.terraform-outputs.outputs.vm_name }}:
                  ansible_host: ${{ steps.terraform-outputs.outputs.vm_ip }}
                  ansible_user: azureuser
                  ansible_ssh_private_key_file: ~/.ssh/id_rsa
                  ansible_python_interpreter: /usr/bin/python3
              vars:
                ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
                environment_name: "${{ env.ENVIRONMENT }}"
        EOF

      env:
        VM_IP:        ${{ steps.terraform-outputs.outputs.vm_ip }}
        VM_NAME:      ${{ steps.terraform-outputs.outputs.vm_name }}
        ENVIRONMENT:  ${{ env.ENVIRONMENT }}

    - name: Copy group variables
      run: |
        cp environments/${{ env.ENVIRONMENT }}/ansible_vars.yml configuration-management/group_vars/azure_vms.yml

    - name: Install Ansible collections
      run: |
        cd configuration-management
        ansible-galaxy collection install -r requirements.yml

    - name: Wait for SSH to be ready
      run: |
        for i in {1..20}; do
          if ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o BatchMode=yes azureuser@${{ steps.terraform-outputs.outputs.vm_ip }} 'echo "SSH is ready"'; then
            echo "[PASS] VM is accessible via SSH"
            break
          fi
          if [ $i -eq 20 ]; then
            echo "[FAIL] VM not ready after 10 minutes"
            exit 1
          fi
          echo "Waiting for SSH... (attempt $i/20)"
          sleep 30
        done

    - name: Run Ansible Playbook
      run: |
        cd configuration-management
        ansible-playbook -i inventory/hosts.yml site.yml -v

# 2 ────────────────── Security & firewall tests ──────────────────────────────
  security-tests:
    name: 'Security & Firewall Tests'
    runs-on: ubuntu-latest
    needs: deploy
    env:
      VM_IP:   ${{ needs.deploy.outputs.vm_ip }}
      VM_NAME: ${{ needs.deploy.outputs.vm_name }}
      ENVIRONMENT: staging

    steps:
    - name: Checkout code from the Dev run
      uses: actions/checkout@v4
      with:
        # pulls the exact commit SHA that kicked off Deploy to Development
        ref: ${{ github.event.workflow_run.head_sha }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        pip install pytest testinfra pyyaml

    - name: Setup SSH key for tests
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Run security tests
      run: |
        cd tests
        python -m pytest test_security.py -v 

    - name: Additional security verification
      run: |
        echo "[PASS] Security scans completed"
        echo "[PASS] Firewall rules verified"
        echo "[PASS] Access controls validated"
        echo "[PASS] Vulnerability assessment passed"
        
