name: 'Disaster Recovery & Rollback'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        default: 'production'
        type: choice
        options:
        - dev
        - staging
        - production
      rollback_type:
        description: 'Type of rollback'
        required: true
        default: 'infrastructure'
        type: choice
        options:
        - infrastructure
        - configuration
        - full
      commit_sha:
        description: 'Commit SHA to rollback to (leave empty for previous successful deployment)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

env:
  ARM_USE_OIDC: true
  ARM_USE_CLI: false

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  validate-rollback:
    name: 'Validate Rollback Request'
    runs-on: ubuntu-latest
    outputs:
      target-sha: ${{ steps.determine-target.outputs.target-sha }}
      rollback-approved: ${{ steps.approval.outputs.approved }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine target commit
      id: determine-target
      run: |
        if [ -n "${{ github.event.inputs.commit_sha }}" ]; then
          TARGET_SHA="${{ github.event.inputs.commit_sha }}"
        else
          # Find the last successful deployment
          TARGET_SHA=$(git log --oneline --grep="Deploy to ${{ github.event.inputs.environment }}" -n 2 | tail -n 1 | cut -d' ' -f1)
        fi
        
        echo "target-sha=$TARGET_SHA" >> $GITHUB_OUTPUT
        echo "Rolling back to commit: $TARGET_SHA"

    - name: Validate target commit
      run: |
        TARGET_SHA="${{ steps.determine-target.outputs.target-sha }}"
        if ! git cat-file -e "$TARGET_SHA"; then
          echo "Error: Target commit $TARGET_SHA does not exist"
          exit 1
        fi
        
        echo "Target commit validated: $TARGET_SHA"
        git show --oneline -s "$TARGET_SHA"

    - name: Log rollback request
      run: |
        echo "=== ROLLBACK REQUEST ==="
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Rollback Type: ${{ github.event.inputs.rollback_type }}"
        echo "Target Commit: ${{ steps.determine-target.outputs.target-sha }}"
        echo "Reason: ${{ github.event.inputs.reason }}"
        echo "Requested by: ${{ github.actor }}"
        echo "Timestamp: $(date -u)"

    - name: Approval checkpoint
      id: approval
      run: |
        echo "approved=true" >> $GITHUB_OUTPUT
        echo "Rollback request validated and approved"

  backup-current-state:
    name: 'Backup Current State'
    runs-on: ubuntu-latest
    needs: validate-rollback
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout current state
      uses: actions/checkout@v4

    - name: Azure Login via OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Backup Terraform state
      run: |
        ENV="${{ github.event.inputs.environment }}"
        BACKUP_DIR="backups/pre-rollback-$(date +%Y%m%d-%H%M%S)"
        mkdir -p "$BACKUP_DIR"
        
        # Copy environment configuration
        cp environments/$ENV/terraform.tfvars provisioning/
        cp environments/$ENV/backend.tf provisioning/
        
        cd provisioning
        terraform init
        
        # Export current state
        terraform show -json > "../$BACKUP_DIR/terraform-state-backup.json"
        terraform output -json > "../$BACKUP_DIR/terraform-outputs-backup.json"
        
        echo "Backup created at: $BACKUP_DIR"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Upload backup
      uses: actions/upload-artifact@v4
      with:
        name: pre-rollback-backup-${{ github.event.inputs.environment }}
        path: backups/

  rollback-infrastructure:
    name: 'Rollback Infrastructure'
    runs-on: ubuntu-latest
    needs: [validate-rollback, backup-current-state]
    if: contains(github.event.inputs.rollback_type, 'infrastructure') || github.event.inputs.rollback_type == 'full'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout target commit
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-rollback.outputs.target-sha }}

    - name: Azure Login via OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Rollback Terraform
      run: |
        ENV="${{ github.event.inputs.environment }}"
        
        # Copy environment configuration from target commit
        cp environments/$ENV/terraform.tfvars provisioning/
        cp environments/$ENV/backend.tf provisioning/
        
        cd provisioning
        terraform init
        terraform plan -var-file=terraform.tfvars -out=rollback.tfplan
        terraform apply -auto-approve rollback.tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Get rolled back outputs
      id: terraform-outputs
      run: |
        cd provisioning
        echo "vm_ip=$(terraform output -raw public_ip_address)" >> $GITHUB_OUTPUT
        echo "vm_name=$(terraform output -raw vm_name)" >> $GITHUB_OUTPUT

    - name: Save inventory for configuration rollback
      run: |
        mkdir -p configuration-management/inventory
        cat > configuration-management/inventory/hosts.yml << EOF
        all:
          children:
            azure_vms:
              hosts:
                ${{ steps.terraform-outputs.outputs.vm_name }}:
                  ansible_host: ${{ steps.terraform-outputs.outputs.vm_ip }}
                  ansible_user: azureuser
                  ansible_ssh_private_key_file: ~/.ssh/id_rsa
                  ansible_python_interpreter: /usr/bin/python3
              vars:
                ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
                environment_name: "${{ github.event.inputs.environment }}"
        EOF

    - name: Upload inventory
      uses: actions/upload-artifact@v4
      with:
        name: rollback-inventory-${{ github.event.inputs.environment }}
        path: configuration-management/inventory/hosts.yml

  rollback-configuration:
    name: 'Rollback Configuration'
    runs-on: ubuntu-latest
    needs: [validate-rollback, rollback-infrastructure]
    if: always() && (contains(github.event.inputs.rollback_type, 'configuration') || github.event.inputs.rollback_type == 'full')
    
    steps:
    - name: Checkout target commit
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-rollback.outputs.target-sha }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible

    - name: Download inventory
      uses: actions/download-artifact@v4
      with:
        name: rollback-inventory-${{ github.event.inputs.environment }}
        path: configuration-management/inventory/
      continue-on-error: true

    - name: Copy environment variables
      run: |
        ENV="${{ github.event.inputs.environment }}"
        cp environments/$ENV/ansible_vars.yml configuration-management/group_vars/azure_vms.yml

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Install Ansible collections
      run: |
        cd configuration-management
        ansible-galaxy collection install -r requirements.yml

    - name: Run configuration rollback
      run: |
        cd configuration-management
        ansible-playbook -i inventory/hosts.yml site.yml --ssh-extra-args='-o StrictHostKeyChecking=no' -v

  verify-rollback:
    name: 'Verify Rollback'
    runs-on: ubuntu-latest
    needs: [rollback-infrastructure, rollback-configuration]
    if: always()
    
    steps:
    - name: Checkout target commit
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-rollback.outputs.target-sha }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        pip install requests pytest testinfra

    - name: Download inventory
      uses: actions/download-artifact@v4
      with:
        name: rollback-inventory-${{ github.event.inputs.environment }}
        path: configuration-management/inventory/
      continue-on-error: true

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Verify rollback success
      run: |
        cd tests
        python -m pytest test_deployment.py -v --env=${{ github.event.inputs.environment }}

  notify-rollback-status:
    name: 'Notify Rollback Status'
    runs-on: ubuntu-latest
    needs: [validate-rollback, backup-current-state, rollback-infrastructure, rollback-configuration, verify-rollback]
    if: always()
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [ "${{ needs.verify-rollback.result }}" == "success" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "emoji=✅" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "emoji=❌" >> $GITHUB_OUTPUT
        fi

    - name: Create rollback report
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ steps.status.outputs.status }}';
          const emoji = '${{ steps.status.outputs.emoji }}';
          
          const report = `${emoji} **Rollback ${status.toUpperCase()}**
          
          **Environment:** ${{ github.event.inputs.environment }}
          **Rollback Type:** ${{ github.event.inputs.rollback_type }}
          **Target Commit:** ${{ needs.validate-rollback.outputs.target-sha }}
          **Reason:** ${{ github.event.inputs.reason }}
          **Requested by:** ${{ github.actor }}
          **Timestamp:** ${new Date().toISOString()}
          
          **Job Results:**
          - Validation: ${{ needs.validate-rollback.result }}
          - Backup: ${{ needs.backup-current-state.result }}
          - Infrastructure Rollback: ${{ needs.rollback-infrastructure.result }}
          - Configuration Rollback: ${{ needs.rollback-configuration.result }}
          - Verification: ${{ needs.verify-rollback.result }}
          
          [View rollback details](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
          
          console.log(report);
          
          // Create an issue to track the rollback
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `[ROLLBACK] ${emoji} ${status.toUpperCase()} - ${{ github.event.inputs.environment }} environment`,
            body: report,
            labels: ['rollback', '${{ github.event.inputs.environment }}', status]
          });
